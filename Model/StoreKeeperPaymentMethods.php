<?php

namespace StoreKeeper\StoreKeeper\Model;

use Magento\Checkout\Model\Session as CheckoutSession;
use Magento\Framework\Event\ManagerInterface;
use Magento\Payment\Gateway\Command\CommandManagerInterface;
use Magento\Payment\Gateway\Command\CommandPoolInterface;
use Magento\Payment\Gateway\Config\ValueHandlerPoolInterface;
use Magento\Payment\Gateway\Data\PaymentDataObjectFactory;
use Magento\Payment\Gateway\Validator\ValidatorPoolInterface;
use Magento\Payment\Model\Method\Adapter;
use Magento\Quote\Api\Data\CartInterface;
use Psr\Log\LoggerInterface;
use StoreKeeper\StoreKeeper\Helper\Api\Auth;
use StoreKeeper\StoreKeeper\Helper\Config as ConfigHelper;

class StoreKeeperPaymentMethods extends Adapter
{
    const CODE = 'storekeeper';

    private CheckoutSession $checkoutSession;

    private ConfigHelper $configHelper;

    private Auth $authHelper;

    public function __construct(
        ManagerInterface          $eventManager,
        ValueHandlerPoolInterface $valueHandlerPool,
        PaymentDataObjectFactory  $paymentDataObjectFactory,
        CheckoutSession           $checkoutSession,
        ConfigHelper              $configHelper,
        Auth                      $authHelper,
                                  $code,
                                  $formBlockType,
                                  $infoBlockType,
        CommandPoolInterface      $commandPool = null,
        ValidatorPoolInterface    $validatorPool = null,
        CommandManagerInterface   $commandExecutor = null,
        LoggerInterface           $logger = null
    ) {
        parent::__construct(
            $eventManager,
            $valueHandlerPool,
            $paymentDataObjectFactory,
            $code,
            $formBlockType,
            $infoBlockType,
            $commandPool,
            $validatorPool,
            $commandExecutor,
            $logger
        );

        $this->checkoutSession = $checkoutSession;
        $this->configHelper = $configHelper;
        $this->authHelper = $authHelper;
    }

    public function getCode(): string
    {
        return static::CODE;
    }

    public function isAvailable(CartInterface $quote = null)
    {
        if ($quote == null) {
            $quote = $this->checkoutSession->getQuote();
        }

        if (!$this->configHelper->isAvailable($quote->getStoreId())) {
            return false;
        }

        $this->getAllActiveMethods($quote->getStoreId());

        return parent::isAvailable($quote); // TODO: Change the autogenerated stub
    }

    private function getAllActiveMethods($storeId)
    {
        $activeMethods = [];

        $payment = $this->authHelper->getModule('ShopModule', $storeId)->listStartableWebShopPaymentProviderMethods(0, 20, null, null);

        var_dump($payment);
        die();
    }
}
